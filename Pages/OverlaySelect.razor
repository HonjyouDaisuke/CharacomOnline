@page "/overlay"
@using Radzen
@using Radzen.Blazor
@using CharacomOnline.Entity
@using CharacomOnline.Service
@using CharacomOnline.ViewModel
@using CharacomOnline.Components
@inject OverlayViewModel OverlayViewModel
@inject TokenStorage TokenStorage
@inject BoxFileService BoxFileService
@inject NavigationManager Navi
@inject AppState AppState
@inject UserSettingsViewModel UserSettingsViewModel

@namespace CharacomOnline.Page

<RadzenDropZoneContainer TItem="Overlays" Data="data" 
ItemSelector="@ItemSelector"
Style="height:auto 100%;"
CanDrop="@CanDrop"
Drop="@OnDrop">
	<ChildContent>
		<RadzenSplitter class="full-height-splitter" Orientation="Radzen.Orientation.Vertical">
			<RadzenSplitterPane Size="65%" Resizable="true">
				<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Orientation="Radzen.Orientation.Horizontal">
					<RadzenStack Orientation="Orientation.Vertical" Style="gap: 1rem;">
						<RadzenColorPicker @bind-Value=colorA ShowHSV=@showHSV ShowRGBA=@showRGBA ShowColors=@showColors ShowButton=@showButton />
						<RadzenDropZone Value="Areas.BoxA" Style="flex: 1; gap: 1rem;" >
							<CharaImageCard ImageData="@ImageEffectService.GetBinaryImageData(OverlayViewModel.OverlayA.OverlayBmp)" Height="160" Width="160" IsLoading="false" />
						</RadzenDropZone>
					</RadzenStack>
					<CharaImageCard ImageData="" Height="320" Width="320" IsLoading="false" />


					<RadzenStack Orientation="Orientation.Vertical" Style="gap: 1rem;">
						<RadzenColorPicker @bind-Value=colorB ShowHSV=@showHSV ShowRGBA=@showRGBA ShowColors=@showColors ShowButton=@showButton />
						<RadzenDropZone Name="aaa" Value="Areas.BoxB" Style="flex: 1; gap: 1rem;" >
							<CharaImageCard ImageData="@ImageEffectService.GetBinaryImageData(OverlayViewModel.OverlayB.OverlayBmp)" Height="160" Width="160" IsLoading="false" />
						</RadzenDropZone>
					</RadzenStack>
				</RadzenStack>
			</RadzenSplitterPane>
			<RadzenSplitterPane Size="30%" Resizable="true">
				<RadzenSplitter Orientation="Radzen.Orientation.Horizontal">
					<RadzenSplitterPane Size="30%" MinSize="10%" Resizable="true">
						Defalut Area
					</RadzenSplitterPane>
					<RadzenSplitterPane Size="70%" MinSize="10%" Resizable="true">
						<RadzenDropZone TItem="Overlays" Value="Areas.Select" class="rz-border-radius-2 rz-p-4" Style="display: flex; flex-wrap: wrap; gap: 1rem;">

						</RadzenDropZone>	
					</RadzenSplitterPane>
				</RadzenSplitter>
			</RadzenSplitterPane>
		</RadzenSplitter>
	</ChildContent>
	<Template Context="item">
		<CharaImageCard ImageData="@ImageEffectService.GetBinaryImageData(item.overlay.OverlayBmp)" Id="@item.Name" Height="80" Width="80" />
	</Template>
</RadzenDropZoneContainer>

<style>
	.rz-can-drop {
	border: dashed 2px darkorange !important;
	}


	.drop-zone {
	padding: 2px;
	border: dashed 2px transparent;
	transition: border linear 0.2s;
	}

	.drop-zone.hover , .drop-zone:hover {
	border: dashed 2px darkorange;
	cursor: pointer;
	}
</style>

@code {
	private bool isHovering = false;
	private bool showHSV = false;
	private bool showRGBA = false;
	private bool showColors = true;
	private bool showButton = false;
	private Guid? projectId;

	private string? accessToken;

	string colorA = "rgb(68, 58, 110)";
	string colorB = "rgb(68, 58, 110)";
	// Filter items by zone value
	Func<Overlays, RadzenDropZone<Overlays>, bool> ItemSelector = (item, zone) =>
	{
		return item.Area == (Areas)zone.Value;
	};
	//Func<Overlays, RadzenDropZone<Overlays>, bool> ItemSelector = (item, zone) => item.Area == (Areas)zone.Value;
	Func<RadzenDropZoneItemEventArgs<Overlays>, bool> CanDrop = request =>
	{
		if (request.ToZone.Value.ToString() == "Select") return false;
		return true;
	};

	//void OnItemRender(RadzenDropZoneItemRenderEventArgs<Overlays> args)
	//{


	void OnDrop(RadzenDropZoneItemEventArgs<Overlays> args)
	{
		Console.WriteLine($"args (From) = {args.FromZone.Value.ToString()}");
		Console.WriteLine($"args (To) = {args.ToZone.Value.ToString()}");
		Console.WriteLine($"args (Item) = {args.Item.Name}");
		if (args.ToZone.Value.ToString() == "BoxA") {
			OverlayViewModel.OverlayA = args.Item.overlay;
			var toColor = ImageEffectService.ConvertRgbStringToSKColor(colorA);
			OverlayViewModel.OverlayA.OverlayBmp = ImageEffectService.ColorChangeBitmap(OverlayViewModel.OverlayA.OverlayBmp, toColor);

		}
		if (args.ToZone.Value.ToString() == "BoxB") {
			OverlayViewModel.OverlayB = args.Item.overlay;
			var toColor = ImageEffectService.ConvertRgbStringToSKColor(colorB);
			OverlayViewModel.OverlayB.OverlayBmp = ImageEffectService.ColorChangeBitmap(OverlayViewModel.OverlayB.OverlayBmp, toColor);
		}

		StateHasChanged();
	}

	List<Overlays> data = new ();
	List<OverlayDataClass> overlayItems = new ();

	private async Task ChangeChara(string charaName)
	{
		// アクセストークンを取得
		accessToken = await TokenStorage.GetAccessTokenAsync();
		Console.WriteLine($"accessToken = {accessToken}");
		if (string.IsNullOrEmpty(accessToken))
		{
			Navi.NavigateTo("/auth");
			return;
		}

		Console.WriteLine("accessTokenCheck...");
		if (!(await BoxFileService.IsTokenValidAsync(accessToken)))
		{
			Navi.NavigateTo("/auth");
			return;
		}
		if (AppState.UserId != null) await UserSettingsViewModel.GetUserSettings((Guid)AppState.UserId);

		projectId = AppState.CurrentProjectId;
		if (projectId == null) return;
		await OverlayViewModel.InitMaterialsData((Guid)projectId);
		int count = 0;
		foreach (var material in OverlayViewModel.GetMaterials())
		{
			var overlay = await OverlayViewModel.MakeOverlayDataAsync((Guid)projectId, charaName, material, accessToken);
			Overlays newItem = new();
			newItem.Id = count;
			newItem.Area = Areas.Select;
			newItem.Name = overlay.MaterialName;
			newItem.overlay = overlay;
			data.Add(newItem);
			count++;
			Console.WriteLine($"chara={overlay.CharaName} material={overlay.MaterialName} 個数 = {overlay.SelectedItemCount}");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await ChangeChara("川");
	}

	public class Overlays
	{
		public int Id { get; set; }
		public string Name { get; set; } = "";
		public Areas Area { get; set; } = Areas.Select;
		public OverlayDataClass overlay { get; set; } = new();
	}

    public enum Areas
    {
        BoxA,
        BoxB,
        Select,
    }
}
