@page "/upload"
@using CharacomOnline.Service
@inject Supabase.Client SupabaseClient
@inject SupabaseService SupabaseService
@inject AppSettings AppSettings
@inject NotificationService NotificationService

<h3>ファイルアップロード</h3>

<!-- InputFileコンポーネントを使用 -->
<InputFile OnChange="HandleFileSelected" />

<button @onclick="UploadFile">アップロード</button>

<h3>コネクションID</h3>
<p>Supabase URL:@AppSettings.SUPABASE_URL</p>
<p>Supabase AnonKey:@AppSettings.ANON_KEY</p>
<input id="downloadFile" type="text" @bind="@fileNameString" />
<button @onclick="DownloadFile">ダウンロード</button>
<br />
@if (downloadImage != null)
{
    <img src="@downloadImage" alt="Downloaded Image" />
    <p> aaa </p>
}


@code {
    private IBrowserFile? selectedFile;
    private string? fileNameString;
    private string? downloadImage;

    // ファイル選択時の処理
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    // 通知
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    // アップロード処理
    private async Task UploadFile()
    {
        if (selectedFile == null || string.IsNullOrEmpty(selectedFile.Name))
        {
            // 通知を表示
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "アップロード エラー",
                    Detail = $"ファイルが選択されていません。<br>ファイルを選択してください。",
                    Duration = 2000
                }
            );
            Console.WriteLine("ファイルが選択されていません");
            return;
        }
        
        var uniqueFileName = RandomStringMaker.MakeString(10) + Path.GetExtension(selectedFile.Name);

        await SupabaseService.UploadFileAsync(selectedFile, uniqueFileName);
        
        // 通知を表示
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "アップロード完了",
                Detail = $"アップロードが完了しました。<br>ファイル名：{uniqueFileName}",
                Duration = 2000
            }
        ); 
        Console.WriteLine("アップロード成功");
    }

    // ダウンロード処理
    private async Task DownloadFile()
    {
        if (string.IsNullOrEmpty(fileNameString))
        {
            // 通知を表示
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "ダウンロード エラー。",
                    Detail = $"ファイルが選択されていません。<br>ファイル名を指定してください。",
                    Duration = 2000
                }
            );
            Console.WriteLine("ファイルが選択されていません");
            return;
        }
        // SKBitmapでファイル読み込み
        var bitmap = await SupabaseService.DownloadFileAsBitmapAsync(fileNameString);
        if (bitmap == null) return;

        // downloadImageにImageStringを入れて表示
        downloadImage = ImageEffectService.GetBinaryImageData(bitmap);

        // 通知を表示
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "ダウンロード完了",
                Detail = $"ダウンロードが完了しました。<br>ファイル名：{fileNameString}",
                Duration = 2000
            }
        );
    }
    
}
