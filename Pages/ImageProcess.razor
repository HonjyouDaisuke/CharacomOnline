@page "/image-process"

@using CharacomOnline.Components
@using CharacomOnline.Components.ImageProcessCard
@using CharacomOnline.Service
@using CharacomOnline.Entity
@using CharacomOnline.ViewModel

@inject SessionStorageService SessionStorage
@inject NavigationManager Navi

@if (isLoading)
{
	<RadzenStack AlignItems="AlignItems.Center" class="rz-m-12" Gap="2rem">
		<RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
	</RadzenStack>
}
else if(userId == null)
{
	<SelectingErrorMessage 
		ErrorMessageTitle="ユーザ認証エラー" 
		ErrorMessage="ログインできていません。ログインしてください" 
		LinkMsg="ログインへ" 
		LinkClick=" () => OnNaviClick(loginUrl)" />
}
else if(projectId == null)
{
	<SelectingErrorMessage ErrorMessageTitle="プロジェクト認識エラー"
						   ErrorMessage="プロジェクトを選択してください。"
						   LinkMsg="プロジェクト選択へ"
						   LinkClick=" () => OnNaviClick(projectsUrl)" />

}
else
{
    <RadzenSplitter class="full-height-splitter" Orientation="Radzen.Orientation.Vertical">
        <RadzenSplitterPane Size="40%" MinSize="20%" Resizable="true">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal">
            <h3>Image Area...</h3>
                <SrcImageCard Width="160" Height="160" IsLoading="@isSrcLoading" ImageData="@imageProcessViewModel.imageProcessRepository.AppraisalsSrcImageData" />
                <SrcImageCard Width="160" Height="160" IsLoading="@isSrcLoading" ImageData="@imageProcessViewModel.imageProcessRepository.AppraisalsThinImageData" />
            </RadzenStack>
        </RadzenSplitterPane>
        <RadzenSplitterPane Size="60%" MinSize="20%" Resizable="true">
            <RadzenSplitter Orientation="Radzen.Orientation.Horizontal">
                <RadzenSplitterPane Size="50%" MinSize="10%" Resizable="true">
                    <RadzenCard class="pane-content">
					    <SelectCharaGrid SelectedData="@selectedData" SelectedDataChanged="OnSelectedDataChanged" />
				    </RadzenCard>
                </RadzenSplitterPane>
                <RadzenSplitterPane Size="50%" MinSize="10%" Resizable="true">
                    <h3>対象資料ゾーン</h3>
                </RadzenSplitterPane>
            </RadzenSplitter>
        </RadzenSplitterPane>
</RadzenSplitter>
}

<style>
    .full-height-splitter {
        height: calc(100vh - 3.5rem - 3.5rem - 3.5rem); /* 縦方向の高さを画面全体に設定 */
    }

    .pane-content {
        padding: 10px;
        height: 100%;
    }
</style>

@code {
    private List<CharaDataClass> selectedData { get; set; } = new List<CharaDataClass>();
    [Inject] private CharaDataViewModel CharaDataViewModel { get; set; } = default!;
    [Inject] private ImageProcessViewModel imageProcessViewModel { get; set; } = default!;
    private bool isLoading = true;
    private Guid? userId;
    private Guid? projectId;
    private string loginUrl = "./login";
    private string projectsUrl = "./projects";
    private bool isSrcLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!await SessionStorage.IsLoggedInAsync())
        {
            isLoading = false;
            return;
        }
        userId = await SessionStorage.GetUserIDAsync();

        if (!await SessionStorage.IsSelectedProjectAsync())
        {
            isLoading = false;
            return;
        }
        projectId = await SessionStorage.GetProjectIDAsync();


        // await CharaDataViewModel.FetchCharaDataAsync((Guid)projectId, Guid.Empty);
        isLoading = false;
        if (CharaDataViewModel._charaDataRepository.Appraisals == null || CharaDataViewModel._charaDataRepository.Appraisals.Count < 1)
        {
            await RefreshDataAsync();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void OnNaviClick(string goTo)
    {
        Navi.NavigateTo(goTo);
    }

    private async Task RefreshDataAsync()
    {
        if (projectId == null) return;
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        // データ取得開始
        await CharaDataViewModel.FetchCharaDataAsync(
            (Guid)projectId,
            Guid.Empty
        );
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void OnSelectedDataChanged(List<CharaDataClass> newSelectedData)
    {
        if (newSelectedData == null) return;
        isSrcLoading = true;
        await InvokeAsync(StateHasChanged);

        foreach(var item in newSelectedData)
        {
            Console.WriteLine($"選択物：{item.ToString()}");
        }
        await imageProcessViewModel.CreateAppraisalOverlay(newSelectedData);
        // await imageProcessViewModel.AddAppraisalData(newSelectedData.SrcImage);
        isSrcLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}