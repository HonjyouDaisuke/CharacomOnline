@page "/reset-password"
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject Supabase.Client SupabaseClient

<h3>パスワードリセットです</h3>

@if (isResetSuccessful)
{
	<p class="text-success">パスワードがリセットされました。ログインページへ移動してください。</p>
	<button @onclick="GoToLogin">ログインページへ</button>
}
else
{
	<EditForm Model="resetModel" OnValidSubmit="ResetPasswordAsync">
		<DataAnnotationsValidator />

		<div>
			<label>新しいパスワード:</label>
			<InputText type="password" @bind-Value="resetModel.NewPassword" />
			<ValidationMessage For="@(() => resetModel.NewPassword)" />
		</div>

		<button type="submit">パスワードをリセット</button>

		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<p class="text-danger">@errorMessage</p>
		}
	</EditForm>
}

@code {
	private void GoToLogin()
	{
		Navigation.NavigateTo("/login");
	}

	private class ResetPasswordModel
	{
		[Required]
		[MinLength(8, ErrorMessage = "パスワードは8文字以上にしてください。")]
		public string NewPassword { get; set; } = string.Empty;
	}

	private ResetPasswordModel resetModel = new();
	private string? accessToken;
	private string? refreshToken;
	private string? errorMessage;
	private bool isResetSuccessful = false;
	private string? email;

	protected override void OnInitialized()
	{
		Console.WriteLine("aaaaa");
		// URL のハッシュ部分を取得
		var uri = new Uri(Navigation.Uri);
		var fragment = uri.Fragment; // `#` 以降の部分

		if (!string.IsNullOrEmpty(fragment))
		{
			var queryParams = System.Web.HttpUtility.ParseQueryString(fragment.TrimStart('#'));

			// ✅ access_token（パスワードリセット用トークン）
			accessToken = queryParams["access_token"];

			email = queryParams["email"];

			// ✅ refresh_token（セッション更新用トークン）
			refreshToken = queryParams["refresh_token"];

			// ✅ エラーがある場合
			errorMessage = queryParams["error"];
			Console.WriteLine($"Access Token: {accessToken}");
			Console.WriteLine($"email = {email}");
		}
	}


	private async Task ResetPasswordAsync()
	{
		if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(resetModel.NewPassword))
		{
			Console.WriteLine("トークンまたはパスワードがありません");
			return;
		}
		var jwt = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
		var token = jwt.ReadJwtToken(accessToken);
		var exp = token.Payload.Expiration;  // Unix Timestamp
		var expDateTimeUtc = DateTimeOffset.FromUnixTimeSeconds(exp!.Value).UtcDateTime;
		var expDateTimeJst = expDateTimeUtc + TimeSpan.FromHours(9);
		Console.WriteLine($"Token Expires At (UTC): {expDateTimeUtc}");
		Console.WriteLine($"Token Expires At (JST): {expDateTimeJst}");
		try
		{
			email = "honjyou.daisuke@sysmex.co.jp";
			Console.WriteLine($"Access Token: {accessToken}");
			Console.WriteLine($"email = {email}");
			// OTPの検証
			var session = await SupabaseClient.Auth.VerifyOTP(
							email,                // ユーザーのメールアドレス
							accessToken,          // メールで受け取ったトークン（OTP）
							Supabase.Gotrue.Constants.EmailOtpType.Recovery // OTPタイプを Recovery に指定
			);

			if (session != null)
			{
				// ユーザー属性を更新してパスワードを変更
			var userAttributes = new Supabase.Gotrue.UserAttributes
			{
				Password = resetModel.NewPassword
			};
				// 新しいパスワードを変更
				var changePasswordResult = await SupabaseClient.Auth.Update(
						userAttributes
				);

				if (changePasswordResult != null)
				{
					Console.WriteLine("✅ パスワードリセット成功！");
					Navigation.NavigateTo("/login"); // ログイン画面へリダイレクト
				}
				else
				{
					Console.WriteLine("パスワード変更に失敗しました");
				}
			}
			else
			{
				Console.WriteLine("OTP検証に失敗しました");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"❌ エラー: {ex.Message}");
			errorMessage = ex.Message;
		}
	}
}