@page "/reset-password"
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject Supabase.Client SupabaseClient

<h3>パスワードリセット</h3>

@if (isResetSuccessful)
{
    <p class="text-success">パスワードがリセットされました。ログインページへ移動してください。</p>
    <button @onclick="GoToLogin">ログインページへ</button>
}
else
{
    <EditForm Model="resetModel" OnValidSubmit="ResetPasswordAsync">
        <DataAnnotationsValidator />

        <div>
            <label>新しいパスワード:</label>
            <InputText type="password" @bind-Value="resetModel.NewPassword" />
            <ValidationMessage For="@(() => resetModel.NewPassword)" />
        </div>

        <button type="submit">パスワードをリセット</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">@errorMessage</p>
        }
    </EditForm>
}

@code {
    private ResetPasswordModel resetModel = new();
    private string? token;
    private string? errorMessage;
    private bool isResetSuccessful = false;
    private string? email;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        token = query["token"]; // トークン取得
        email = query["email"]; // メールアドレス取得

        if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(email))
        {
            errorMessage = "無効なリセットリンクです。";
        }
    }


    private async Task ResetPasswordAsync()
    {
        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "無効なリセットトークンです。";
            return;
        }

        try
        {
            await SupabaseClient.Auth.Update(new Supabase.Gotrue.UserAttributes { Password = resetModel.NewPassword });
            isResetSuccessful = true;
        }
        catch (Exception ex)
        {
            errorMessage = "パスワードリセットに失敗しました: " + ex.Message;
        }
    }


    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private class ResetPasswordModel
    {
        [Required]
        [MinLength(8, ErrorMessage = "パスワードは8文字以上にしてください。")]
        public string NewPassword { get; set; } = string.Empty;
    }
}
