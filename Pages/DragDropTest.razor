@page "/dragdrop"
@using Radzen

<RadzenDropZoneContainer TItem="MyTask" Data="data" 
ItemSelector="@ItemSelector"
ItemRender="@OnItemRender"
CanDrop="@CanDrop"
Drop="@OnDrop">
	<ChildContent>
		<RadzenSplitter class="full-height-splitter" Orientation="Radzen.Orientation.Vertical">
			<RadzenSplitterPane Size="35%" Resizable="true">
				<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Orientation="Radzen.Orientation.Horizontal">

					<RadzenDropZone Value="Status.Started" Style="flex: 1; gap: 1rem;" >
						<RadzenText>Put Zone1</RadzenText>
					</RadzenDropZone>

					<RadzenDropZone Value="Status.Deleted" class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
						<RadzenText>No Put Zone</RadzenText>
					</RadzenDropZone>

					<RadzenDropZone Name="aaa" Value="Status.Completed" Style="flex: 1; gap: 1rem;" >
						<RadzenText >Put Zone2</RadzenText>
					</RadzenDropZone>

				</RadzenStack>
			</RadzenSplitterPane>
			<RadzenSplitterPane Size="65%" Resizable="true">
				<RadzenSplitter Orientation="Radzen.Orientation.Horizontal">
					<RadzenSplitterPane Size="30%" MinSize="10%" Resizable="true">
						Defalut Area
					</RadzenSplitterPane>
					<RadzenSplitterPane Size="70%" MinSize="10%" Resizable="true">
						<RadzenDropZone Value="Status.NotStarted" class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;">
							itemZone
						</RadzenDropZone>	
					</RadzenSplitterPane>
				</RadzenSplitter>
			</RadzenSplitterPane>
		</RadzenSplitter>
	</ChildContent>
	<Template>
		<strong>@context.Name</strong>
	</Template>
</RadzenDropZoneContainer>

<style>
	.rz-can-drop {
    border: dashed 2px darkorange !important;
	}


	.drop-zone {
	padding: 2px;
	border: dashed 2px transparent;
	transition: border linear 0.2s;
	}

	.drop-zone.hover , .drop-zone:hover {
	border: dashed 2px darkorange;
	cursor: pointer;
	}
</style>

@code {
	private bool isHovering = false;
	// Filter items by zone value
	Func<MyTask, RadzenDropZone<MyTask>, bool> ItemSelector = (item, zone) => item.Status == (Status)zone.Value && item.Status != Status.Deleted;

	Func<RadzenDropZoneItemEventArgs<MyTask>, bool> CanDrop = request => {
		if (request.ToZone.Value.ToString() == "Started" || request.ToZone.Value.ToString() == "Completed") return true;
		return false;
	};

	void OnItemRender(RadzenDropZoneItemRenderEventArgs<MyTask> args)
	{
		// Customize item appearance
		if (args.Item.Name == "Task2")
		{
			args.Attributes["draggable"] = "false";
			args.Attributes["style"] = "cursor:not-allowed";
			args.Attributes["class"] = "rz-card rz-variant-flat rz-background-color-primary-lighter rz-color-on-primary-lighter";
		}
		else
		{
			args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light";
		}

		// Do not render item if deleted
		args.Visible = args.Item.Status != Status.Deleted;
	}

	void OnDrop(RadzenDropZoneItemEventArgs<MyTask> args)
	{
		Console.WriteLine($"args (From) = {args.FromZone.Value.ToString()}");
		Console.WriteLine($"args (To) = {args.ToZone.Value.ToString()}");
		Console.WriteLine($"args (Item) = {args.Item.Name}");
		//if ((Status)args.FromZone.Value != Status.NotStarted) return;
		//data.Remove(args.Item);
		//data.Insert(data.IndexOf(args.ToItem), args.Item);
		// args.Item.Status = (Status)args.ToZone.Value;

      // if (args.ToItem != null && args.ToItem != args.Item)
      //  {
      //      // reorder items in same zone or place the item at specific index in new zone
      //      data.Remove(args.Item);
      //      data.Insert(data.IndexOf(args.ToItem), args.Item);
      //  } *@
    }

    IList<MyTask> data;

    protected override void OnInitialized()
    {
        data = Enumerable.Range(0, 5)
            .Select(i => 
                new MyTask() 
                { 
                    Id = i, 
                    Name = $"Task{i}", 
                    Status = Status.NotStarted 
                })
            .ToList();
    }

    public class MyTask
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Status Status { get; set; } = Status.NotStarted;
    }

    public enum Status
    {
        NotStarted,
        Started,
        Completed,
        Deleted
    }
}
