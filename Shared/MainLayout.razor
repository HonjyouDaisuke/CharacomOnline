@using CharacomOnline.Components
@using CharacomOnline.Service
@using CharacomOnline.ViewModel
@using Radzen
@using Radzen.Blazor

@inherits LayoutComponentBase
@inject SessionStorageService SessionStorage
@inject AppState AppState
@inject LocalStorageService LocalStorage
@inject ProjectsViewModel ProjectsViewModel
@inject ThemeService ThemeService

<PageTitle>CharacomOnline</PageTitle>
<RadzenComponents @rendermode="InteractiveServer" />
<RadzenLayout>
	<MainHeader @bind-SidebarExpanded="parentSidebarExpanded" />
	<NavMenu @bind-SidebarExpanded="parentSidebarExpanded" />
	<!-- NotificationManagerを配置 -->
	<NotificationManager />
	<RadzenBody>
		<div class="rz-p-1">
			@Body
		</div>
	</RadzenBody>
	<RadzenFooter>
		Footer
	</RadzenFooter>
</RadzenLayout>

@code {
	private bool parentSidebarExpanded = true;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		var option = new ThemeOptions
			{
				Theme = "standard",
			};
		ThemeService.SetTheme(option);
        // SessionStorage から AppState を復元
        var restoredState = await SessionStorage.LoadAppStateAsync();
        if (string.IsNullOrEmpty(restoredState.UserId.ToString()))
        {
            // AppState にデータを設定
            AppState.CurrentProjectId = restoredState.CurrentProjectId;
            AppState.UserId = restoredState.UserId;
            AppState.UserName = restoredState.UserName;
            AppState.UserRole = restoredState.UserRole;
            AppState.UserPictureUrl = restoredState.UserPictureUrl;

            // 再レンダリングをトリガー
            StateHasChanged();
        }
        // LocalStorage から currentProjectIdを復元
        var currentProjectId = await LocalStorage.GetCurrentProjectIdAsync();
        if (!string.IsNullOrEmpty(currentProjectId.ToString()))
        {
            AppState.CurrentProjectId = currentProjectId;
            var projectName = await ProjectsViewModel.GetProjectNameFromProjectId((Guid)currentProjectId);
            if (!string.IsNullOrEmpty(projectName))
            {
                await ProjectsViewModel.SetCurrentProject((Guid)currentProjectId, projectName);
                AppState.CurrentProjectName = projectName;
            }
        }
        
        
    }
}
