@using CharacomOnline.Components
@using CharacomOnline.Entity
@using CharacomOnline.Service
@using CharacomOnline.Service.TableService
@using CharacomOnline.ViewModel
@using Radzen
@using Radzen.Blazor

@inherits LayoutComponentBase
@inject SessionStorageService SessionStorage
@inject AppState AppState
@inject LocalStorageService LocalStorage
@inject ProjectsViewModel ProjectsViewModel
@inject ThemeService ThemeService
@inject NotificationsTableService NotificationsTableService

<PageTitle>CharacomOnline</PageTitle>
<RadzenComponents @rendermode="InteractiveServer" />
<RadzenLayout>
	<MainHeader @bind-SidebarExpanded="parentSidebarExpanded" @bind-PanelExpanded="notificationsPanelExpanded"/>
	<NavMenu @bind-SidebarExpanded="parentSidebarExpanded" />
	<!-- NotificationManagerを配置 -->
	<NotificationManager />
	<RadzenBody>
		<div class="rz-p-1">
			@Body
		</div>
	</RadzenBody>

	<!-- 通知パネルを設置 -->
	<NotificationsPanel @bind-PanelExpanded="notificationsPanelExpanded" Notifications="notifications"/>

	<RadzenFooter>
		Characom Imager Pro Online ©2025 鈴木・三崎法科学研究所
	</RadzenFooter>

	
</RadzenLayout>

@code {
	private bool parentSidebarExpanded = true;
	private bool notificationsPanelExpanded = false;

	private List<Notification>? notifications;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		var option = new ThemeOptions
		{
			Theme = "standard",
		};
		ThemeService.SetTheme(option);
		// SessionStorage から AppState を復元
		var restoredState = await SessionStorage.LoadAppStateAsync();
		if (string.IsNullOrEmpty(restoredState.UserId.ToString()))
		{
			// AppState にデータを設定
			AppState.CurrentProjectId = restoredState.CurrentProjectId;
			AppState.UserId = restoredState.UserId;
			AppState.UserName = restoredState.UserName;
			AppState.UserRole = restoredState.UserRole;
			AppState.UserPictureUrl = restoredState.UserPictureUrl;
			if (AppState.UserId != null){
				notifications = await NotificationsTableService.FetchNotificationsFromUserIdAsync((Guid)AppState.UserId);
				foreach (var n in notifications)
				{
					Console.WriteLine($"title {n.Title}, message {n.Message}");
				}
			}else{
				Console.WriteLine($"お知らせがNullでした。userId = {AppState.UserId}");
			}
			// 再レンダリングをトリガー
			StateHasChanged();
		}
		// LocalStorage から currentProjectIdを復元
		var currentProjectId = await LocalStorage.GetCurrentProjectIdAsync();
		if (!string.IsNullOrEmpty(currentProjectId.ToString()))
		{
			AppState.CurrentProjectId = currentProjectId;
			var projectName = await ProjectsViewModel.GetProjectNameFromProjectId((Guid)currentProjectId);
			if (!string.IsNullOrEmpty(projectName))
			{
				await ProjectsViewModel.SetCurrentProject((Guid)currentProjectId, projectName);
				AppState.CurrentProjectName = projectName;
			}
		}


	}
}
