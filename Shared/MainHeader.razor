@using CharacomOnline.Service
@using CharacomOnline.Components
@using CharacomOnline.Enums
@using CharacomOnline.ViewModel
@using Blazored.LocalStorage

@inject ILocalStorageService localStorage
@inject SessionStorageService SessionStorage
@inject OAuthService OAuthService
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject ProjectsViewModel ProjectsViewModel
@inject UsersViewModel UsersViewModel
@inject AppState AppState

<RadzenHeader>
	<RadzenRow AlignItems="AlignItems.Center" Gap="1">
		<RadzenColumn>
			<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="2px">
				<RadzenSidebarToggle Click="@ChangeExpand" />
				<RadzenText Style="padding-top: 10px;" TextStyle="TextStyle.H5">Characom Imapger Pro Online</RadzenText>
			</RadzenStack>
		</RadzenColumn>
		<RadzenColumn>
			<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
				<RadzenText Style="padding-top: 10px;" TextStyle="TextStyle.Subtitle1">@AppState.CurrentProjectName</RadzenText>
			</RadzenStack>
		</RadzenColumn>
		<RadzenColumn >
			<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End" Style="padding-right: 1rem;">
				<RadzenAppearanceToggle />
				<ProfileMenu UserPicture="@userPictureUrl" UserName="@AppState.UserName" IsDBLogin="@isDBLogin" IsBoxLogin="@isBoxLogin" Logout="Logout" ProjectName="@currentProjectName" />
			</RadzenStack>
		</RadzenColumn>
	</RadzenRow>
</RadzenHeader>

@code {
	[Parameter]
	public bool SidebarExpanded { get; set; } = true;

	// 変更イベントのためのEventCallbackプロパティ
	[Parameter]
	public EventCallback<bool> SidebarExpandedChanged { get; set; }

	private string? userPictureUrl;
	private string? userName;
	private bool isBoxLogin = false;
	private bool isDBLogin = false;
	private Guid? currentProjectId;
	private string? currentProjectName;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		await UsersViewModel.SetUserInfoToAppState();
		Console.WriteLine($"userPict = {AppState.UserPictureUrl}");
		userPictureUrl = AppState.UserPictureUrl;
		if (string.IsNullOrEmpty(userPictureUrl))
		{
			userPictureUrl = "/images/no_user_icon.png";
		} 
		userName = AppState.UserName;
		isBoxLogin = OAuthService.IsLogin();
		isDBLogin = AppState.IsLoggedIn;
		currentProjectId = AppState.CurrentProjectId;
		currentProjectName = AppState.CurrentProjectName;
		await InvokeAsync(StateHasChanged);
	}

	private async Task ChangeExpand()
	{
		bool newValue = !SidebarExpanded;
		await SidebarExpandedChanged.InvokeAsync(newValue);  // 親に新しい値を送信
	}

	private async Task Logout(ProfileMenuItemType menu)
	{
		Console.WriteLine($"Logout {menu}");
		if (menu == ProfileMenuItemType.DBLogout || menu == ProfileMenuItemType.Exit)
		{
			try
			{
				// Supabaseセッションをクリア
				await SupabaseClient.Auth.SignOut();

				// ローカルストレージのトークンを削除
				await localStorage.RemoveItemAsync("access_token");
				await localStorage.RemoveItemAsync("refresh_token");

				// SessionStorageをクリア
				await SessionStorage.ClearAsync();

				// ログインページにリダイレクト
				NavigationManager.NavigateTo("/login", forceLoad: true);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"ログアウトエラー: {ex.Message}");
			}
		}
	}

	protected override void OnInitialized()
	{
		AppState.PropertyChanged += (_, e) =>
		{
			if (e.PropertyName == nameof(AppState.CurrentProjectName) || e.PropertyName == nameof(AppState.UserName))
			{
				StateHasChanged();
			}
		};
	}

	public void Dispose()
	{
		AppState.PropertyChanged -= async (_, e) => await InvokeAsync(StateHasChanged);
	}
}
