@using CharacomOnline.Service

@inject SessionStorageService SessionStorage

<RadzenHeader>
	<RadzenRow AlignItems="AlignItems.Center" Gap="1">
		<RadzenColumn>
			<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="2px">
				<RadzenSidebarToggle Click="@ChangeExpand" />
				<RadzenText Style="padding-top: 10px;" TextStyle="TextStyle.H5">Characom Imapger Pro Online</RadzenText>
			</RadzenStack>
		</RadzenColumn>
		<RadzenColumn >
			<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End" Style="padding-right: 1rem;">
			@if (userPictureUrl == null || userPictureUrl == string.Empty)
			{
				<RadzenIcon Icon="account_circle" style="font-size: 2rem;"/>
			}
			else
			{
				<RadzenImage Path="@userPictureUrl" class="rz-gravatar" AlternateText="UserName" />
			}
			</RadzenStack>
		</RadzenColumn>
	</RadzenRow>
</RadzenHeader>

@code {
	[Parameter]
	public bool SidebarExpanded { get; set; } = true;

	// 変更イベントのためのEventCallbackプロパティ
	[Parameter]
	public EventCallback<bool> SidebarExpandedChanged { get; set; }

	private string? userPictureUrl;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		userPictureUrl = await SessionStorage.GetUserPicture();
		await InvokeAsync(StateHasChanged);
	}
	private async Task ChangeExpand()
	{
		bool newValue = !SidebarExpanded;
		await SidebarExpandedChanged.InvokeAsync(newValue);  // 親に新しい値を送信
	}
}
