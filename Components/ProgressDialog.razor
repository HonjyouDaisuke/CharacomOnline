@using CharacomOnline.Service
@using CharacomOnline.Entity
@inject DialogService DialogService
@inject BoxFileService BoxFileService
@inject SessionStorageService SessionStorage
@inject TokenStorage TokenStorage

@namespace CharacomOnline.Components
@inject DialogService DialogService

<RadzenStack Orientation="Radzen.Orientation.Vertical">
	<RadzenText>@parameters!.Message</RadzenText>
	<div class="rz-m-12">
		<RadzenProgressBar Value=@parameters!.Value Max=@parameters.MaxValue Unit=@parameters.Unit Mode="ProgressBarMode.Determinate" Style="width: 100%; height: 20px;" />
	</div>
	<RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="async () => await HandleCancel()">キャンセル</RadzenButton>
</RadzenStack>

@code {
	[Parameter] public ProgressDialogParameters? parameters { get; set; }
	// プログレス更新の購読
	// private Action<int>? progressUpdatedHandler;

	private async Task HandleCancel()
	{
		if (parameters == null) return;
		if (parameters.OnCancel.HasDelegate)
		{
			await parameters.OnCancel.InvokeAsync();
		}

		DialogService.Close();
		return;
	}
	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		StateHasChanged(); // これで画面の更新を強制する
	}

	private void UpdateProgressBar(int progress)
	{
		if (parameters == null) return;
		parameters.Value = progress;
		StateHasChanged();  // ダイアログの再描画を強制
	}

}