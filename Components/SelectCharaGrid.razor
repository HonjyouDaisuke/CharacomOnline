@using CharacomOnline.Service
@using CharacomOnline.ViewModel
@using CharacomOnline.Entity
@using CharacomOnline.Repositories
@using Microsoft.AspNetCore.Components.Forms
@using Toolbelt.Blazor.FileDropZone
@using Radzen.Blazor
@inject FileUploadService FileUploadService
@inject CharaDataViewModel CharaDataViewModel

@namespace CharacomOnline.Components
	<RadzenDataGrid 
		TItem="CharaDataClass" 
		Data="@CharaDataViewModel._charaDataRepository.Appraisals" 
		AllowRowSelectOnRowClick="true"
		RowClick="@OnRowSelected"
		SelectionMode="DataGridSelectionMode.Multiple"
		EditMode="DataGridEditMode.Single"
		AllowVirtualization="true"
		AllowGrouping="true" >
		<Columns>
			<RadzenDataGridColumn Property="CharaName" Title="文字種" />
			<RadzenDataGridColumn Property="MaterialName" Title="資料名" />
			<RadzenDataGridColumn Title="イメージ">
				<Template>
					<img src="@context.Thumbnail" alt="@context.CharaName" width="50" height="50" />
				</Template>
			</RadzenDataGridColumn>
			<!--
			<RadzenDataGridColumn Property="Color" Title="Color">
				<EditTemplate>
					<RadzenDropDown TValue="Item" Data=@colors Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
				</EditTemplate>
				<Template>
					<RadzenText>aaa</RadzenText>
				</Template>
			</RadzenDataGridColumn>
			-->
		</Columns>
	</RadzenDataGrid>

<style>
	.drop-zone {
	padding: 2px;
	border: dashed 2px transparent;
	transition: border linear 0.2s;
	}

	.drop-zone.hover {
	border: dashed 2px darkorange;
	cursor: pointer;
	}
</style>

@code {
	private List<CharaDataClass> charaData = new List<CharaDataClass>();
	[Parameter]
	public List<CharaDataClass> SelectedData {get;set;} = new List<CharaDataClass>();

	[Parameter]
	public Guid? UserId { get; set; }

	[Parameter]
	public Guid? ProjectId { get; set; }

	[Parameter]
	public EventCallback<List<CharaDataClass>> SelectedDataChanged { get; set; }
	[Parameter]
	public EventCallback OnFilesUploaded { get; set; }
	[Parameter]
	public EventCallback<InputFileChangeEventArgs> OnFilesDropped { get; set; }

	private List<CharaDataClass> selectedData = new List<CharaDataClass>();

	private List<Item> items = new List<Item>
	{
		new Item { Id = 1, Name = "Item 1", Color = "Red" },
		new Item { Id = 2, Name = "Item 2", Color = "Green" },
	};
	private List<string> colors = new List<string> { "Red", "Green", "Blue", "Yellow" };

	private async Task OnRowSelected(DataGridRowMouseEventArgs<CharaDataClass> args)
	{
		var item = args.Data;
			
		Console.WriteLine(item.ToString());
		// アイテムが既に選択済みか確認
		if (selectedData.Contains(item))
		{
			Console.WriteLine("見つかったので削除します。");
			// 選択済みの場合、リストから削除
			selectedData.Remove(item);
		}
		else
		{
			// 未選択の場合、リストに追加
			selectedData.Add(item);
		}

		// 選択されたデータを列挙
		Console.WriteLine($"選択個数：{selectedData.Count}");
		foreach (var data in selectedData)
		{
			Console.WriteLine($"選択されたデータ：{data.ToString()}");
		}
		await SelectedDataChanged.InvokeAsync(selectedData);
	}

	public class Item
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public string Color { get; set; } // 色の選択肢
	}

}