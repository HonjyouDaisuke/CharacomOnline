@using CharacomOnline.Service
@using CharacomOnline.ViewModel
@using CharacomOnline.Entity
@using Toolbelt.Blazor.FileDropZone
@inject FileUploadService FileUploadService


<FileDropZone class="drop-zone">
	<InputFile hidden OnChange="OnInputFileChange" multiple />
	<RadzenDataGrid TItem="CharaDataClass" Data="@CharaDataView.CharaDataRepository.Appraisals" RowSelect="@OnRowSelected" SelectionMode="DataGridSelectionMode.Single" AllowGrouping="true" Render="OnRender">
		<Columns>
			<RadzenDataGridColumn Property="Id" Title="No" />
			<RadzenDataGridColumn Property="CharaName" Title="文字種" />
			<RadzenDataGridColumn Property="MaterialName" Title="資料名" />
			<RadzenDataGridColumn Property="NumString" Title="回数" />
			<RadzenDataGridColumn Property="Size" Title="サイズ" />
			<RadzenDataGridColumn Title="イメージ">
				<Template>
					<RadzenImage Path="@context.ImageUrl" alt="Chara Image" width="50" height="50" />
				</Template>
			</RadzenDataGridColumn>
		</Columns>
	</RadzenDataGrid>
</FileDropZone>

<style>
	.drop-zone {
	padding: 2px;
	border: dashed 2px transparent;
	transition: border linear 0.2s;
	}

	.drop-zone.hover {
	border: dashed 2px darkorange;
	cursor: pointer;
	}
</style>

@code {
	private List<CharaDataClass> charaData = new List<CharaDataClass>();
	[Parameter]
	public CharaDataViewModel CharaDataView {get; set;} = new CharaDataViewModel();

	[Parameter]
	public CharaDataClass SelectedData {get;set;} = new CharaDataClass();

	[Parameter]
	public EventCallback<CharaDataClass> SelectedDataChanged { get; set; }

	private async void OnRowSelected(CharaDataClass selectedData)
	{
		SelectedData = selectedData;
		Console.WriteLine(selectedData.ToString());
		await SelectedDataChanged.InvokeAsync(selectedData);
	}
	private CharaDataClass dataMake()
	{
		CharaDataClass charaData = new CharaDataClass();
		charaData.CharaName = "a";
		charaData.MaterialName = "b";
		charaData.Id = 1;
		charaData.NumString = "5";
		charaData.Size = "10 x 10";
		charaData.ImageUrl = "";
		return charaData;
	}

	/**
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		for (int i = 0; i < 10; i++)
		{
			CharaDataView.charaDataRepository.addAppraisals(dataMake());
		}
		
	}
	**/

	void OnRender(DataGridRenderEventArgs<CharaDataClass> args)
	{
		if (args.FirstRender)
		{
			args.Grid.Groups.Add(new GroupDescriptor() { Title = "CharaName", Property = "CharaName", SortOrder = SortOrder.Descending });
			StateHasChanged();
		}
	}

	private async void  OnInputFileChange(InputFileChangeEventArgs e)
	{
		try
		{
			foreach (var file in e.GetMultipleFiles(30))
			{
				//Console.WriteLine(file.Name);
				await CharaDataView.DataInput(FileUploadService, file);
			}

			
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
		StateHasChanged();
	}
}