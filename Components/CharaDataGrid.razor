@using CharacomOnline.Service
@using CharacomOnline.ViewModel
@using CharacomOnline.Entity
@using CharacomOnline.Repositories
@using Microsoft.AspNetCore.Components.Forms
@using Toolbelt.Blazor.FileDropZone
@using Radzen.Blazor
@inject FileUploadService FileUploadService
@inject CharaDataViewModel CharaDataViewModel

@namespace CharacomOnline.Components
<p>ProjectId : @ProjectId</p>
@if (isProgress)
{
	<RadzenRow>
		<RadzenColumn>
			<RadzenCard>			
				<RadzenProgressBar @bind-Value="@progressValue" Max="@progressMax" Unit="@unitString"/>
			</RadzenCard>
		</RadzenColumn>
	</RadzenRow>
}
<FileDropZone class="drop-zone">
	<InputFile hidden OnChange="OnInputFileChange" multiple />
	<RadzenDataGrid 
		TItem="CharaDataClass" 
		Data="@CharaDataViewModel._charaDataRepository.Appraisals" 
		RowSelect="@OnRowSelected" 
		SelectionMode="DataGridSelectionMode.Single" 
		PagerPosition="PagerPosition.TopAndBottom"
		AllowPaging="true"
		AllowGrouping="true"
		Render="OnRender">
		<Columns>
			<RadzenDataGridColumn Property="Id" Title="No" />
			<RadzenDataGridColumn Property="CharaName" Title="文字種" />
			<RadzenDataGridColumn Property="MaterialName" Title="資料名" />
			<RadzenDataGridColumn Property="Times" Title="回数" />
			<RadzenDataGridColumn Property="Size" Title="サイズ" />
			<RadzenDataGridColumn Title="イメージ">
				<Template>
					<img src="@context.Thumbnail" alt="@context.CharaName" width="50" height="50" />
				</Template>
			</RadzenDataGridColumn>
		</Columns>
	</RadzenDataGrid>
</FileDropZone>

<style>
	.drop-zone {
	padding: 2px;
	border: dashed 2px transparent;
	transition: border linear 0.2s;
	}

	.drop-zone.hover {
	border: dashed 2px darkorange;
	cursor: pointer;
	}
</style>

@code {
	private List<CharaDataClass> charaData = new List<CharaDataClass>();
	[Parameter]
	public CharaDataClass SelectedData {get;set;} = new CharaDataClass();

	[Parameter]
	public Guid? UserId { get; set; }

	[Parameter]
	public Guid? ProjectId { get; set; }

	[Parameter]
	public EventCallback<CharaDataClass> SelectedDataChanged { get; set; }
	[Parameter]
	public EventCallback OnFilesUploaded { get; set; }
	[Parameter]
	public EventCallback<InputFileChangeEventArgs> OnFilesDropped { get; set; }

	private double progressValue = 0;
	private double progressMax = 0;
	private bool isProgress = false;
	private string unitString = "";

	private async void OnRowSelected(CharaDataClass selectedData)
	{
		SelectedData = selectedData;
		Console.WriteLine(selectedData.ToString());
		await SelectedDataChanged.InvokeAsync(selectedData);
	}

	void OnRender(DataGridRenderEventArgs<CharaDataClass> args)
	{
		if (args.FirstRender)
		{
			args.Grid.Groups.Add(new GroupDescriptor() { Title = "CharaName", Property = "CharaName", SortOrder = SortOrder.Descending });
			StateHasChanged();
		}
	}
	
	private async void OnInputFileChange(InputFileChangeEventArgs e)
	{
		await OnFilesDropped.InvokeAsync(e);
	}
}